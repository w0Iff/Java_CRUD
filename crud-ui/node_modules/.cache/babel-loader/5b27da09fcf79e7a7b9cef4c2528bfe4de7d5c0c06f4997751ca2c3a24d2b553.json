{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MICHEL\\\\crud-ui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport EntityList from './components/EntityList';\nimport EntityForm from './components/EntityForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [entities, setEntities] = useState([]);\n  useEffect(() => {\n    // Fetch entities from backend API when component mounts\n    axios.get('http://localhost:8080/entities').then(response => {\n      setEntities(response.data);\n    }).catch(error => {\n      console.error('Error fetching entities:', error);\n    });\n  }, []); // Empty dependency array to run effect only once when component mounts\n\n  const handleEntityCreateOrUpdate = entity => {\n    // Update entities list with newly created/updated entity\n    setEntities(prevEntities => [...prevEntities, entity]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to My Entity Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EntityForm, {\n        onCreateOrUpdate: handleEntityCreateOrUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EntityList, {\n        entities: entities\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hSvn9iFGa0gGPZvrwFN2Qj1D1t4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","logo","axios","EntityList","EntityForm","jsxDEV","_jsxDEV","App","_s","entities","setEntities","get","then","response","data","catch","error","console","handleEntityCreateOrUpdate","entity","prevEntities","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onCreateOrUpdate","_c","$RefreshReg$"],"sources":["C:/Users/MICHEL/crud-ui/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport EntityList from './components/EntityList';\nimport EntityForm from './components/EntityForm';\n\nfunction App() {\n  const [entities, setEntities] = useState([]);\n\n  useEffect(() => {\n    // Fetch entities from backend API when component mounts\n    axios.get('http://localhost:8080/entities')\n      .then(response => {\n        setEntities(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching entities:', error);\n      });\n  }, []); // Empty dependency array to run effect only once when component mounts\n\n  const handleEntityCreateOrUpdate = (entity) => {\n    // Update entities list with newly created/updated entity\n    setEntities(prevEntities => [...prevEntities, entity]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Welcome to My Entity Manager</h1>\n        <EntityForm onCreateOrUpdate={handleEntityCreateOrUpdate} />\n        <EntityList entities={entities} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACAE,KAAK,CAACS,GAAG,CAAC,gCAAgC,CAAC,CACxCC,IAAI,CAACC,QAAQ,IAAI;MAChBH,WAAW,CAACG,QAAQ,CAACC,IAAI,CAAC;IAC5B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAME,0BAA0B,GAAIC,MAAM,IAAK;IAC7C;IACAT,WAAW,CAACU,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAED,MAAM,CAAC,CAAC;EACxD,CAAC;EAED,oBACEb,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBhB,OAAA;MAAQe,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BhB,OAAA;QAAKiB,GAAG,EAAEtB,IAAK;QAACoB,SAAS,EAAC,UAAU;QAACG,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClDtB,OAAA;QAAAgB,QAAA,EAAI;MAA4B;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrCtB,OAAA,CAACF,UAAU;QAACyB,gBAAgB,EAAEX;MAA2B;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5DtB,OAAA,CAACH,UAAU;QAACM,QAAQ,EAAEA;MAAS;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACpB,EAAA,CA7BQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA+BZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}